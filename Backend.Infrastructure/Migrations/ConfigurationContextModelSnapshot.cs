// <auto-generated />
using System;
using Backend.Infrastructure.Configuration;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Backend.Infrastructure.Migrations
{
    [DbContext(typeof(ConfigurationContext))]
    partial class ConfigurationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Backend.Core.Models.AddressEntity", b =>
                {
                    b.Property<Guid>("AddressId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddressCity");

                    b.Property<string>("AddressComplement");

                    b.Property<string>("AddressCountry");

                    b.Property<string>("AddressNeighborhood");

                    b.Property<string>("AddressNumber");

                    b.Property<string>("AddressState");

                    b.Property<string>("AddressStreet");

                    b.Property<int>("AddressType");

                    b.Property<string>("AddressZipCode");

                    b.HasKey("AddressId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Backend.Core.Models.Beneficiary", b =>
                {
                    b.Property<Guid>("BeneficiaryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.HasKey("BeneficiaryId");

                    b.ToTable("Beneficiary");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Beneficiary");
                });

            modelBuilder.Entity("Backend.Core.Models.BeneficiaryAddress", b =>
                {
                    b.Property<Guid>("BeneficiaryAddressId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AddressId");

                    b.Property<Guid>("BeneficiaryId");

                    b.HasKey("BeneficiaryAddressId");

                    b.HasIndex("AddressId");

                    b.HasIndex("BeneficiaryId");

                    b.ToTable("Beneficiary_Address");
                });

            modelBuilder.Entity("Backend.Core.Models.BeneficiaryTelephone", b =>
                {
                    b.Property<Guid>("BeneficiaryTelephoneId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BeneficiaryId");

                    b.Property<Guid>("TelephoneId");

                    b.HasKey("BeneficiaryTelephoneId");

                    b.HasIndex("BeneficiaryId");

                    b.HasIndex("TelephoneId");

                    b.ToTable("Individual_Telephone");
                });

            modelBuilder.Entity("Backend.Core.Models.ContractBeneficiary", b =>
                {
                    b.Property<Guid>("ContractBeneficiaryId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BeneficiaryId");

                    b.Property<Guid>("SignedContractId");

                    b.HasKey("ContractBeneficiaryId");

                    b.HasIndex("BeneficiaryId");

                    b.HasIndex("SignedContractId");

                    b.ToTable("Contract_Beneficiary");
                });

            modelBuilder.Entity("Backend.Core.Models.ContractEntity", b =>
                {
                    b.Property<Guid>("ContractId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ContractCategory");

                    b.Property<bool>("ContractDeleted");

                    b.Property<DateTime>("ContractExpiryDate");

                    b.Property<int>("ContractType");

                    b.HasKey("ContractId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("Backend.Core.Models.SignedContractEntity", b =>
                {
                    b.Property<Guid>("SignedContractId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ContractId");

                    b.Property<bool>("ContractIndividualIsActive");

                    b.Property<Guid>("IndividualId");

                    b.Property<Guid?>("SignedContractIndividualBeneficiaryId");

                    b.HasKey("SignedContractId");

                    b.HasIndex("ContractId");

                    b.HasIndex("SignedContractIndividualBeneficiaryId");

                    b.ToTable("SignedContracts");
                });

            modelBuilder.Entity("Backend.Core.Models.Telephone", b =>
                {
                    b.Property<Guid>("TelephoneId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("TelephoneNumber");

                    b.Property<int>("TelephoneType");

                    b.HasKey("TelephoneId");

                    b.ToTable("Telephones");
                });

            modelBuilder.Entity("Backend.Core.Models.IndividualEntity", b =>
                {
                    b.HasBaseType("Backend.Core.Models.Beneficiary");

                    b.Property<DateTime>("IndividualBirthdate");

                    b.Property<string>("IndividualCPF")
                        .HasMaxLength(11);

                    b.Property<string>("IndividualEmail")
                        .HasMaxLength(30);

                    b.Property<string>("IndividualName")
                        .HasMaxLength(50);

                    b.Property<string>("IndividualRG")
                        .HasMaxLength(9);

                    b.ToTable("Beneficiaries");

                    b.HasDiscriminator().HasValue("IndividualEntity");
                });

            modelBuilder.Entity("Backend.Core.Models.MobileDeviceEntity", b =>
                {
                    b.HasBaseType("Backend.Core.Models.Beneficiary");

                    b.Property<string>("MobileDeviceBrand")
                        .HasMaxLength(15);

                    b.Property<double>("MobileDeviceInvoiceValue");

                    b.Property<DateTime>("MobileDeviceManufactoringYear");

                    b.Property<string>("MobileDeviceModel")
                        .HasMaxLength(20);

                    b.Property<string>("MobileDeviceSerialNumber")
                        .HasMaxLength(40);

                    b.Property<int>("MobileDeviceType");

                    b.ToTable("Beneficiaries");

                    b.HasDiscriminator().HasValue("MobileDeviceEntity");
                });

            modelBuilder.Entity("Backend.Core.Models.PetEntity", b =>
                {
                    b.HasBaseType("Backend.Core.Models.Beneficiary");

                    b.Property<DateTime>("PetBirthdate");

                    b.Property<string>("PetBreed")
                        .HasMaxLength(30);

                    b.Property<string>("PetName")
                        .HasMaxLength(40);

                    b.Property<int>("PetSpecies");

                    b.ToTable("Beneficiaries");

                    b.HasDiscriminator().HasValue("PetEntity");
                });

            modelBuilder.Entity("Backend.Core.Models.RealtyEntity", b =>
                {
                    b.HasBaseType("Backend.Core.Models.Beneficiary");

                    b.Property<DateTime>("RealtyConstructionDate");

                    b.Property<double>("RealtyMarketValue");

                    b.Property<string>("RealtyMunicipalRegistration")
                        .HasMaxLength(50);

                    b.Property<double>("RealtySaleValue");

                    b.ToTable("Beneficiaries");

                    b.HasDiscriminator().HasValue("RealtyEntity");
                });

            modelBuilder.Entity("Backend.Core.Models.VehicleEntity", b =>
                {
                    b.HasBaseType("Backend.Core.Models.Beneficiary");

                    b.Property<string>("VehicleBrand");

                    b.Property<string>("VehicleChassisNumber");

                    b.Property<int>("VehicleColor");

                    b.Property<double>("VehicleCurrentFipeValue");

                    b.Property<int>("VehicleCurrentMileage");

                    b.Property<bool>("VehicleDoneInspection");

                    b.Property<DateTime>("VehicleManufactoringYear");

                    b.Property<string>("VehicleModel");

                    b.Property<DateTime>("VehicleModelYear");

                    b.ToTable("Beneficiaries");

                    b.HasDiscriminator().HasValue("VehicleEntity");
                });

            modelBuilder.Entity("Backend.Core.Models.BeneficiaryAddress", b =>
                {
                    b.HasOne("Backend.Core.Models.AddressEntity", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Backend.Core.Models.Beneficiary", "Beneficiary")
                        .WithMany()
                        .HasForeignKey("BeneficiaryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Backend.Core.Models.BeneficiaryTelephone", b =>
                {
                    b.HasOne("Backend.Core.Models.Beneficiary", "Beneficiary")
                        .WithMany()
                        .HasForeignKey("BeneficiaryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Backend.Core.Models.Telephone", "Telephone")
                        .WithMany()
                        .HasForeignKey("TelephoneId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Backend.Core.Models.ContractBeneficiary", b =>
                {
                    b.HasOne("Backend.Core.Models.Beneficiary", "Beneficiary")
                        .WithMany()
                        .HasForeignKey("BeneficiaryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Backend.Core.Models.SignedContractEntity", "SignedContract")
                        .WithMany()
                        .HasForeignKey("SignedContractId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Backend.Core.Models.SignedContractEntity", b =>
                {
                    b.HasOne("Backend.Core.Models.ContractEntity", "SignedContractContract")
                        .WithMany()
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Backend.Core.Models.IndividualEntity", "SignedContractIndividual")
                        .WithMany()
                        .HasForeignKey("SignedContractIndividualBeneficiaryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
