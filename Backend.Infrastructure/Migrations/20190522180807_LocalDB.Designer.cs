// <auto-generated />
using System;
using Backend.Infrastructure.Configuration;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Backend.Infrastructure.Migrations
{
    [DbContext(typeof(ConfigurationContext))]
    [Migration("20190522180807_LocalDB")]
    partial class LocalDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Backend.Core.Models.Address", b =>
                {
                    b.Property<Guid>("AddressId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddressCity");

                    b.Property<string>("AddressComplement");

                    b.Property<string>("AddressCountry");

                    b.Property<string>("AddressNeighborhood");

                    b.Property<string>("AddressNumber");

                    b.Property<string>("AddressState");

                    b.Property<string>("AddressStreet");

                    b.Property<int>("AddressType");

                    b.Property<string>("AddressZipCode");

                    b.Property<Guid?>("IndividualId");

                    b.HasKey("AddressId");

                    b.HasIndex("IndividualId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Backend.Core.Models.Contract", b =>
                {
                    b.Property<Guid>("ContractId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ContractCategory");

                    b.Property<DateTime>("ContractExpiryDate");

                    b.Property<Guid?>("ContractIndividualId");

                    b.Property<DateTime>("ContractInitialDate");

                    b.Property<int>("ContractType");

                    b.HasKey("ContractId");

                    b.HasIndex("ContractIndividualId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("Backend.Core.Models.ContractIndividual", b =>
                {
                    b.Property<Guid>("ContractIndividualId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("ContractIndividualIsActive");

                    b.HasKey("ContractIndividualId");

                    b.ToTable("ContractIndividuals");
                });

            modelBuilder.Entity("Backend.Core.Models.Individual", b =>
                {
                    b.Property<Guid>("IndividualId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BeneficiaryId");

                    b.Property<Guid?>("ContractIndividualId");

                    b.Property<DateTime>("IndividualBirthdate");

                    b.Property<string>("IndividualCPF")
                        .HasMaxLength(30);

                    b.Property<string>("IndividualEmail");

                    b.Property<string>("IndividualName");

                    b.Property<string>("IndividualRG");

                    b.HasKey("IndividualId");

                    b.HasIndex("ContractIndividualId");

                    b.ToTable("Individuals");
                });

            modelBuilder.Entity("Backend.Core.Models.MobileDevice", b =>
                {
                    b.Property<Guid>("MobileDeviceId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BeneficiaryId");

                    b.Property<string>("MobileDeviceBrand");

                    b.Property<double>("MobileDeviceInvoiceValue");

                    b.Property<DateTime>("MobileDeviceManufactoringYear");

                    b.Property<string>("MobileDeviceModel");

                    b.Property<string>("MobileDeviceSerialNumber");

                    b.Property<int>("MobileDeviceType");

                    b.HasKey("MobileDeviceId");

                    b.ToTable("MobileDevices");
                });

            modelBuilder.Entity("Backend.Core.Models.Pet", b =>
                {
                    b.Property<Guid>("PetId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BeneficiaryId");

                    b.Property<DateTime>("PetBirthdate");

                    b.Property<string>("PetBreed");

                    b.Property<string>("PetName");

                    b.Property<string>("PetSpecies");

                    b.HasKey("PetId");

                    b.ToTable("Pets");
                });

            modelBuilder.Entity("Backend.Core.Models.Realty", b =>
                {
                    b.Property<Guid>("RealtyId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BeneficiaryId");

                    b.Property<Guid>("RealtyAddressId");

                    b.Property<DateTime>("RealtyConstructionDate");

                    b.Property<double>("RealtyMarketValue");

                    b.Property<string>("RealtyMunicipalRegistration");

                    b.Property<double>("RealtySaleValue");

                    b.HasKey("RealtyId");

                    b.HasIndex("RealtyAddressId");

                    b.ToTable("Reaties");
                });

            modelBuilder.Entity("Backend.Core.Models.Telephone", b =>
                {
                    b.Property<Guid>("TelephoneId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("IndividualId");

                    b.Property<string>("TelephoneNumber");

                    b.Property<int>("TelephoneType");

                    b.HasKey("TelephoneId");

                    b.HasIndex("IndividualId");

                    b.ToTable("Telephones");
                });

            modelBuilder.Entity("Backend.Core.Models.Vehicle", b =>
                {
                    b.Property<Guid>("VehicleId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BeneficiaryId");

                    b.Property<string>("VehicleBrand");

                    b.Property<string>("VehicleChassisNumber");

                    b.Property<int>("VehicleColor");

                    b.Property<double>("VehicleCurrentFipeValue");

                    b.Property<short>("VehicleCurrentMileage");

                    b.Property<bool>("VehicleDoneInspection");

                    b.Property<DateTime>("VehicleManufactoringYear");

                    b.Property<string>("VehicleModel");

                    b.Property<DateTime>("VehicleModelYear");

                    b.HasKey("VehicleId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("Backend.Core.Models.Address", b =>
                {
                    b.HasOne("Backend.Core.Models.Individual")
                        .WithMany("IndividualAddresses")
                        .HasForeignKey("IndividualId");
                });

            modelBuilder.Entity("Backend.Core.Models.Contract", b =>
                {
                    b.HasOne("Backend.Core.Models.ContractIndividual")
                        .WithMany("ContractContracts")
                        .HasForeignKey("ContractIndividualId");
                });

            modelBuilder.Entity("Backend.Core.Models.Individual", b =>
                {
                    b.HasOne("Backend.Core.Models.ContractIndividual")
                        .WithMany("ContractIndividuals")
                        .HasForeignKey("ContractIndividualId");
                });

            modelBuilder.Entity("Backend.Core.Models.Realty", b =>
                {
                    b.HasOne("Backend.Core.Models.Address", "RealtyAddress")
                        .WithMany()
                        .HasForeignKey("RealtyAddressId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Backend.Core.Models.Telephone", b =>
                {
                    b.HasOne("Backend.Core.Models.Individual")
                        .WithMany("IndividualTelephones")
                        .HasForeignKey("IndividualId");
                });
#pragma warning restore 612, 618
        }
    }
}
